// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qmuntal/go3mf/internal/mesh (interfaces: MergeableNodes,MergeableFaces,MergeableBeams,MergeableMesh)

// Package mesh is a generated GoMock package.
package mesh

import (
	gomock "github.com/golang/mock/gomock"
	meshinfo "github.com/qmuntal/go3mf/internal/meshinfo"
	reflect "reflect"
)

// MockMergeableNodes is a mock of MergeableNodes interface
type MockMergeableNodes struct {
	ctrl     *gomock.Controller
	recorder *MockMergeableNodesMockRecorder
}

// MockMergeableNodesMockRecorder is the mock recorder for MockMergeableNodes
type MockMergeableNodesMockRecorder struct {
	mock *MockMergeableNodes
}

// NewMockMergeableNodes creates a new mock instance
func NewMockMergeableNodes(ctrl *gomock.Controller) *MockMergeableNodes {
	mock := &MockMergeableNodes{ctrl: ctrl}
	mock.recorder = &MockMergeableNodesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMergeableNodes) EXPECT() *MockMergeableNodesMockRecorder {
	return m.recorder
}

// Node mocks base method
func (m *MockMergeableNodes) Node(arg0 uint32) *Node {
	ret := m.ctrl.Call(m, "Node", arg0)
	ret0, _ := ret[0].(*Node)
	return ret0
}

// Node indicates an expected call of Node
func (mr *MockMergeableNodesMockRecorder) Node(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockMergeableNodes)(nil).Node), arg0)
}

// NodeCount mocks base method
func (m *MockMergeableNodes) NodeCount() uint32 {
	ret := m.ctrl.Call(m, "NodeCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// NodeCount indicates an expected call of NodeCount
func (mr *MockMergeableNodesMockRecorder) NodeCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeCount", reflect.TypeOf((*MockMergeableNodes)(nil).NodeCount))
}

// MockMergeableFaces is a mock of MergeableFaces interface
type MockMergeableFaces struct {
	ctrl     *gomock.Controller
	recorder *MockMergeableFacesMockRecorder
}

// MockMergeableFacesMockRecorder is the mock recorder for MockMergeableFaces
type MockMergeableFacesMockRecorder struct {
	mock *MockMergeableFaces
}

// NewMockMergeableFaces creates a new mock instance
func NewMockMergeableFaces(ctrl *gomock.Controller) *MockMergeableFaces {
	mock := &MockMergeableFaces{ctrl: ctrl}
	mock.recorder = &MockMergeableFacesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMergeableFaces) EXPECT() *MockMergeableFacesMockRecorder {
	return m.recorder
}

// Face mocks base method
func (m *MockMergeableFaces) Face(arg0 uint32) *Face {
	ret := m.ctrl.Call(m, "Face", arg0)
	ret0, _ := ret[0].(*Face)
	return ret0
}

// Face indicates an expected call of Face
func (mr *MockMergeableFacesMockRecorder) Face(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Face", reflect.TypeOf((*MockMergeableFaces)(nil).Face), arg0)
}

// FaceCount mocks base method
func (m *MockMergeableFaces) FaceCount() uint32 {
	ret := m.ctrl.Call(m, "FaceCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// FaceCount indicates an expected call of FaceCount
func (mr *MockMergeableFacesMockRecorder) FaceCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FaceCount", reflect.TypeOf((*MockMergeableFaces)(nil).FaceCount))
}

// InformationHandler mocks base method
func (m *MockMergeableFaces) InformationHandler() *meshinfo.Handler {
	ret := m.ctrl.Call(m, "InformationHandler")
	ret0, _ := ret[0].(*meshinfo.Handler)
	return ret0
}

// InformationHandler indicates an expected call of InformationHandler
func (mr *MockMergeableFacesMockRecorder) InformationHandler() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformationHandler", reflect.TypeOf((*MockMergeableFaces)(nil).InformationHandler))
}

// MockMergeableBeams is a mock of MergeableBeams interface
type MockMergeableBeams struct {
	ctrl     *gomock.Controller
	recorder *MockMergeableBeamsMockRecorder
}

// MockMergeableBeamsMockRecorder is the mock recorder for MockMergeableBeams
type MockMergeableBeamsMockRecorder struct {
	mock *MockMergeableBeams
}

// NewMockMergeableBeams creates a new mock instance
func NewMockMergeableBeams(ctrl *gomock.Controller) *MockMergeableBeams {
	mock := &MockMergeableBeams{ctrl: ctrl}
	mock.recorder = &MockMergeableBeamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMergeableBeams) EXPECT() *MockMergeableBeamsMockRecorder {
	return m.recorder
}

// Beam mocks base method
func (m *MockMergeableBeams) Beam(arg0 uint32) *Beam {
	ret := m.ctrl.Call(m, "Beam", arg0)
	ret0, _ := ret[0].(*Beam)
	return ret0
}

// Beam indicates an expected call of Beam
func (mr *MockMergeableBeamsMockRecorder) Beam(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beam", reflect.TypeOf((*MockMergeableBeams)(nil).Beam), arg0)
}

// BeamCount mocks base method
func (m *MockMergeableBeams) BeamCount() uint32 {
	ret := m.ctrl.Call(m, "BeamCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// BeamCount indicates an expected call of BeamCount
func (mr *MockMergeableBeamsMockRecorder) BeamCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeamCount", reflect.TypeOf((*MockMergeableBeams)(nil).BeamCount))
}

// MockMergeableMesh is a mock of MergeableMesh interface
type MockMergeableMesh struct {
	ctrl     *gomock.Controller
	recorder *MockMergeableMeshMockRecorder
}

// MockMergeableMeshMockRecorder is the mock recorder for MockMergeableMesh
type MockMergeableMeshMockRecorder struct {
	mock *MockMergeableMesh
}

// NewMockMergeableMesh creates a new mock instance
func NewMockMergeableMesh(ctrl *gomock.Controller) *MockMergeableMesh {
	mock := &MockMergeableMesh{ctrl: ctrl}
	mock.recorder = &MockMergeableMeshMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMergeableMesh) EXPECT() *MockMergeableMeshMockRecorder {
	return m.recorder
}

// Beam mocks base method
func (m *MockMergeableMesh) Beam(arg0 uint32) *Beam {
	ret := m.ctrl.Call(m, "Beam", arg0)
	ret0, _ := ret[0].(*Beam)
	return ret0
}

// Beam indicates an expected call of Beam
func (mr *MockMergeableMeshMockRecorder) Beam(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beam", reflect.TypeOf((*MockMergeableMesh)(nil).Beam), arg0)
}

// BeamCount mocks base method
func (m *MockMergeableMesh) BeamCount() uint32 {
	ret := m.ctrl.Call(m, "BeamCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// BeamCount indicates an expected call of BeamCount
func (mr *MockMergeableMeshMockRecorder) BeamCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeamCount", reflect.TypeOf((*MockMergeableMesh)(nil).BeamCount))
}

// Face mocks base method
func (m *MockMergeableMesh) Face(arg0 uint32) *Face {
	ret := m.ctrl.Call(m, "Face", arg0)
	ret0, _ := ret[0].(*Face)
	return ret0
}

// Face indicates an expected call of Face
func (mr *MockMergeableMeshMockRecorder) Face(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Face", reflect.TypeOf((*MockMergeableMesh)(nil).Face), arg0)
}

// FaceCount mocks base method
func (m *MockMergeableMesh) FaceCount() uint32 {
	ret := m.ctrl.Call(m, "FaceCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// FaceCount indicates an expected call of FaceCount
func (mr *MockMergeableMeshMockRecorder) FaceCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FaceCount", reflect.TypeOf((*MockMergeableMesh)(nil).FaceCount))
}

// InformationHandler mocks base method
func (m *MockMergeableMesh) InformationHandler() *meshinfo.Handler {
	ret := m.ctrl.Call(m, "InformationHandler")
	ret0, _ := ret[0].(*meshinfo.Handler)
	return ret0
}

// InformationHandler indicates an expected call of InformationHandler
func (mr *MockMergeableMeshMockRecorder) InformationHandler() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformationHandler", reflect.TypeOf((*MockMergeableMesh)(nil).InformationHandler))
}

// Node mocks base method
func (m *MockMergeableMesh) Node(arg0 uint32) *Node {
	ret := m.ctrl.Call(m, "Node", arg0)
	ret0, _ := ret[0].(*Node)
	return ret0
}

// Node indicates an expected call of Node
func (mr *MockMergeableMeshMockRecorder) Node(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockMergeableMesh)(nil).Node), arg0)
}

// NodeCount mocks base method
func (m *MockMergeableMesh) NodeCount() uint32 {
	ret := m.ctrl.Call(m, "NodeCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// NodeCount indicates an expected call of NodeCount
func (mr *MockMergeableMeshMockRecorder) NodeCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeCount", reflect.TypeOf((*MockMergeableMesh)(nil).NodeCount))
}
