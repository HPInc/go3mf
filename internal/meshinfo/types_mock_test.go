// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qmuntal/go3mf/internal/meshinfo (interfaces: FaceData,Container,MeshInfo,TypedInformer,FaceQuerier)

// Package meshinfo is a generated GoMock package.
package meshinfo

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFaceData is a mock of FaceData interface
type MockFaceData struct {
	ctrl     *gomock.Controller
	recorder *MockFaceDataMockRecorder
}

// MockFaceDataMockRecorder is the mock recorder for MockFaceData
type MockFaceDataMockRecorder struct {
	mock *MockFaceData
}

// NewMockFaceData creates a new mock instance
func NewMockFaceData(ctrl *gomock.Controller) *MockFaceData {
	mock := &MockFaceData{ctrl: ctrl}
	mock.recorder = &MockFaceDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFaceData) EXPECT() *MockFaceDataMockRecorder {
	return m.recorder
}

// Copy mocks base method
func (m *MockFaceData) Copy(arg0 interface{}) {
	m.ctrl.Call(m, "Copy", arg0)
}

// Copy indicates an expected call of Copy
func (mr *MockFaceDataMockRecorder) Copy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockFaceData)(nil).Copy), arg0)
}

// HasData mocks base method
func (m *MockFaceData) HasData() bool {
	ret := m.ctrl.Call(m, "HasData")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasData indicates an expected call of HasData
func (mr *MockFaceDataMockRecorder) HasData() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasData", reflect.TypeOf((*MockFaceData)(nil).HasData))
}

// Invalidate mocks base method
func (m *MockFaceData) Invalidate() {
	m.ctrl.Call(m, "Invalidate")
}

// Invalidate indicates an expected call of Invalidate
func (mr *MockFaceDataMockRecorder) Invalidate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockFaceData)(nil).Invalidate))
}

// Merge mocks base method
func (m *MockFaceData) Merge(arg0 interface{}) {
	m.ctrl.Call(m, "Merge", arg0)
}

// Merge indicates an expected call of Merge
func (mr *MockFaceDataMockRecorder) Merge(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockFaceData)(nil).Merge), arg0)
}

// Permute mocks base method
func (m *MockFaceData) Permute(arg0, arg1, arg2 uint32) {
	m.ctrl.Call(m, "Permute", arg0, arg1, arg2)
}

// Permute indicates an expected call of Permute
func (mr *MockFaceDataMockRecorder) Permute(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permute", reflect.TypeOf((*MockFaceData)(nil).Permute), arg0, arg1, arg2)
}

// MockContainer is a mock of Container interface
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
}

// MockContainerMockRecorder is the mock recorder for MockContainer
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// AddFaceData mocks base method
func (m *MockContainer) AddFaceData(arg0 uint32) (FaceData, error) {
	ret := m.ctrl.Call(m, "AddFaceData", arg0)
	ret0, _ := ret[0].(FaceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFaceData indicates an expected call of AddFaceData
func (mr *MockContainerMockRecorder) AddFaceData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFaceData", reflect.TypeOf((*MockContainer)(nil).AddFaceData), arg0)
}

// Clear mocks base method
func (m *MockContainer) Clear() {
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear
func (mr *MockContainerMockRecorder) Clear() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockContainer)(nil).Clear))
}

// GetCurrentFaceCount mocks base method
func (m *MockContainer) GetCurrentFaceCount() uint32 {
	ret := m.ctrl.Call(m, "GetCurrentFaceCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetCurrentFaceCount indicates an expected call of GetCurrentFaceCount
func (mr *MockContainerMockRecorder) GetCurrentFaceCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentFaceCount", reflect.TypeOf((*MockContainer)(nil).GetCurrentFaceCount))
}

// GetFaceData mocks base method
func (m *MockContainer) GetFaceData(arg0 uint32) (FaceData, error) {
	ret := m.ctrl.Call(m, "GetFaceData", arg0)
	ret0, _ := ret[0].(FaceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaceData indicates an expected call of GetFaceData
func (mr *MockContainerMockRecorder) GetFaceData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceData", reflect.TypeOf((*MockContainer)(nil).GetFaceData), arg0)
}

// InfoType mocks base method
func (m *MockContainer) InfoType() reflect.Type {
	ret := m.ctrl.Call(m, "InfoType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// InfoType indicates an expected call of InfoType
func (mr *MockContainerMockRecorder) InfoType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoType", reflect.TypeOf((*MockContainer)(nil).InfoType))
}

// clone mocks base method
func (m *MockContainer) clone(arg0 uint32) Container {
	ret := m.ctrl.Call(m, "clone", arg0)
	ret0, _ := ret[0].(Container)
	return ret0
}

// clone indicates an expected call of clone
func (mr *MockContainerMockRecorder) clone(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "clone", reflect.TypeOf((*MockContainer)(nil).clone), arg0)
}

// MockMeshInfo is a mock of MeshInfo interface
type MockMeshInfo struct {
	ctrl     *gomock.Controller
	recorder *MockMeshInfoMockRecorder
}

// MockMeshInfoMockRecorder is the mock recorder for MockMeshInfo
type MockMeshInfoMockRecorder struct {
	mock *MockMeshInfo
}

// NewMockMeshInfo creates a new mock instance
func NewMockMeshInfo(ctrl *gomock.Controller) *MockMeshInfo {
	mock := &MockMeshInfo{ctrl: ctrl}
	mock.recorder = &MockMeshInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshInfo) EXPECT() *MockMeshInfoMockRecorder {
	return m.recorder
}

// AddFaceData mocks base method
func (m *MockMeshInfo) AddFaceData(arg0 uint32) (FaceData, error) {
	ret := m.ctrl.Call(m, "AddFaceData", arg0)
	ret0, _ := ret[0].(FaceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFaceData indicates an expected call of AddFaceData
func (mr *MockMeshInfoMockRecorder) AddFaceData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFaceData", reflect.TypeOf((*MockMeshInfo)(nil).AddFaceData), arg0)
}

// Clear mocks base method
func (m *MockMeshInfo) Clear() {
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear
func (mr *MockMeshInfoMockRecorder) Clear() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockMeshInfo)(nil).Clear))
}

// GetCurrentFaceCount mocks base method
func (m *MockMeshInfo) GetCurrentFaceCount() uint32 {
	ret := m.ctrl.Call(m, "GetCurrentFaceCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetCurrentFaceCount indicates an expected call of GetCurrentFaceCount
func (mr *MockMeshInfoMockRecorder) GetCurrentFaceCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentFaceCount", reflect.TypeOf((*MockMeshInfo)(nil).GetCurrentFaceCount))
}

// GetFaceData mocks base method
func (m *MockMeshInfo) GetFaceData(arg0 uint32) (FaceData, error) {
	ret := m.ctrl.Call(m, "GetFaceData", arg0)
	ret0, _ := ret[0].(FaceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaceData indicates an expected call of GetFaceData
func (mr *MockMeshInfoMockRecorder) GetFaceData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceData", reflect.TypeOf((*MockMeshInfo)(nil).GetFaceData), arg0)
}

// InfoType mocks base method
func (m *MockMeshInfo) InfoType() reflect.Type {
	ret := m.ctrl.Call(m, "InfoType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// InfoType indicates an expected call of InfoType
func (mr *MockMeshInfoMockRecorder) InfoType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoType", reflect.TypeOf((*MockMeshInfo)(nil).InfoType))
}

// clone mocks base method
func (m *MockMeshInfo) clone(arg0 uint32) MeshInfo {
	ret := m.ctrl.Call(m, "clone", arg0)
	ret0, _ := ret[0].(MeshInfo)
	return ret0
}

// clone indicates an expected call of clone
func (mr *MockMeshInfoMockRecorder) clone(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "clone", reflect.TypeOf((*MockMeshInfo)(nil).clone), arg0)
}

// cloneFaceInfosFrom mocks base method
func (m *MockMeshInfo) cloneFaceInfosFrom(arg0 uint32, arg1 FaceQuerier, arg2 uint32) {
	m.ctrl.Call(m, "cloneFaceInfosFrom", arg0, arg1, arg2)
}

// cloneFaceInfosFrom indicates an expected call of cloneFaceInfosFrom
func (mr *MockMeshInfoMockRecorder) cloneFaceInfosFrom(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cloneFaceInfosFrom", reflect.TypeOf((*MockMeshInfo)(nil).cloneFaceInfosFrom), arg0, arg1, arg2)
}

// getInternalID mocks base method
func (m *MockMeshInfo) getInternalID() uint64 {
	ret := m.ctrl.Call(m, "getInternalID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// getInternalID indicates an expected call of getInternalID
func (mr *MockMeshInfoMockRecorder) getInternalID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getInternalID", reflect.TypeOf((*MockMeshInfo)(nil).getInternalID))
}

// permuteNodeInformation mocks base method
func (m *MockMeshInfo) permuteNodeInformation(arg0, arg1, arg2, arg3 uint32) {
	m.ctrl.Call(m, "permuteNodeInformation", arg0, arg1, arg2, arg3)
}

// permuteNodeInformation indicates an expected call of permuteNodeInformation
func (mr *MockMeshInfoMockRecorder) permuteNodeInformation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "permuteNodeInformation", reflect.TypeOf((*MockMeshInfo)(nil).permuteNodeInformation), arg0, arg1, arg2, arg3)
}

// resetFaceInformation mocks base method
func (m *MockMeshInfo) resetFaceInformation(arg0 uint32) {
	m.ctrl.Call(m, "resetFaceInformation", arg0)
}

// resetFaceInformation indicates an expected call of resetFaceInformation
func (mr *MockMeshInfoMockRecorder) resetFaceInformation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resetFaceInformation", reflect.TypeOf((*MockMeshInfo)(nil).resetFaceInformation), arg0)
}

// setInternalID mocks base method
func (m *MockMeshInfo) setInternalID(arg0 uint64) {
	m.ctrl.Call(m, "setInternalID", arg0)
}

// setInternalID indicates an expected call of setInternalID
func (mr *MockMeshInfoMockRecorder) setInternalID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setInternalID", reflect.TypeOf((*MockMeshInfo)(nil).setInternalID), arg0)
}

// MockTypedInformer is a mock of TypedInformer interface
type MockTypedInformer struct {
	ctrl     *gomock.Controller
	recorder *MockTypedInformerMockRecorder
}

// MockTypedInformerMockRecorder is the mock recorder for MockTypedInformer
type MockTypedInformerMockRecorder struct {
	mock *MockTypedInformer
}

// NewMockTypedInformer creates a new mock instance
func NewMockTypedInformer(ctrl *gomock.Controller) *MockTypedInformer {
	mock := &MockTypedInformer{ctrl: ctrl}
	mock.recorder = &MockTypedInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTypedInformer) EXPECT() *MockTypedInformerMockRecorder {
	return m.recorder
}

// GetInformationByType mocks base method
func (m *MockTypedInformer) GetInformationByType(arg0 reflect.Type) (*GenericMeshInfo, bool) {
	ret := m.ctrl.Call(m, "GetInformationByType", arg0)
	ret0, _ := ret[0].(*GenericMeshInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetInformationByType indicates an expected call of GetInformationByType
func (mr *MockTypedInformerMockRecorder) GetInformationByType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInformationByType", reflect.TypeOf((*MockTypedInformer)(nil).GetInformationByType), arg0)
}

// InfoTypes mocks base method
func (m *MockTypedInformer) InfoTypes() []reflect.Type {
	ret := m.ctrl.Call(m, "InfoTypes")
	ret0, _ := ret[0].([]reflect.Type)
	return ret0
}

// InfoTypes indicates an expected call of InfoTypes
func (mr *MockTypedInformerMockRecorder) InfoTypes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoTypes", reflect.TypeOf((*MockTypedInformer)(nil).InfoTypes))
}

// getInformationByType mocks base method
func (m *MockTypedInformer) getInformationByType(arg0 reflect.Type) (MeshInfo, bool) {
	ret := m.ctrl.Call(m, "getInformationByType", arg0)
	ret0, _ := ret[0].(MeshInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// getInformationByType indicates an expected call of getInformationByType
func (mr *MockTypedInformerMockRecorder) getInformationByType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getInformationByType", reflect.TypeOf((*MockTypedInformer)(nil).getInformationByType), arg0)
}

// MockFaceQuerier is a mock of FaceQuerier interface
type MockFaceQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockFaceQuerierMockRecorder
}

// MockFaceQuerierMockRecorder is the mock recorder for MockFaceQuerier
type MockFaceQuerierMockRecorder struct {
	mock *MockFaceQuerier
}

// NewMockFaceQuerier creates a new mock instance
func NewMockFaceQuerier(ctrl *gomock.Controller) *MockFaceQuerier {
	mock := &MockFaceQuerier{ctrl: ctrl}
	mock.recorder = &MockFaceQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFaceQuerier) EXPECT() *MockFaceQuerierMockRecorder {
	return m.recorder
}

// GetFaceData mocks base method
func (m *MockFaceQuerier) GetFaceData(arg0 uint32) (FaceData, error) {
	ret := m.ctrl.Call(m, "GetFaceData", arg0)
	ret0, _ := ret[0].(FaceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaceData indicates an expected call of GetFaceData
func (mr *MockFaceQuerierMockRecorder) GetFaceData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceData", reflect.TypeOf((*MockFaceQuerier)(nil).GetFaceData), arg0)
}
